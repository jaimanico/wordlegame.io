

You are an expert Python/Flask developer. Please implement a **Wordle web application** with a clean architecture, well-documented code, and modern DevOps practices. The code should be carefully organized, with comments, docstrings, and modular structure. Follow these requirements:

---

### 📂 Project Structure

```
wordle-project/
├── app.py                # Flask entry point
├── game.py               # Wordle game logic
├── models.py             # SQLAlchemy models
├── requirements.txt      # Dependencies
├── Dockerfile            # Container setup
├── docker-compose.yml    # Local run config
├── words.txt             # Word list
├── static/
│   └── index.html        # Frontend UI
├── tests/
│   └── test_game.py      # Unit tests
└── .github/
    └── workflows/
        └── ci.yml        # GitHub Actions CI
```

---

### ⚙️ Functional Requirements

1. **Game Logic (`game.py`)**

   * Class `WordleGame` to handle target word, guesses, feedback (correct/present/absent).
   * Limit of 6 guesses.
   * Method to return structured feedback for frontend.

2. **Database Models (`models.py`)**

   * `Player` model with `id` and `name`.
   * `Game` model with `id`, `target_word`, `is_won`.
   * `Guess` model with `id`, `guess_word`, and foreign key to `Game`.

3. **Flask Application (`app.py`)**

   * Use Flask + Flask-SQLAlchemy.
   * Configure SQLite (`wordle.db`) for persistence.
   * Expose REST API endpoints:

     * `POST /players` → create a player.
     * `POST /games` → start a new game (assigns target word from `words.txt`).
     * `POST /games/<game_id>/guess` → submit a guess, returns feedback.
     * `GET /games/<game_id>` → get current game state.
   * Serve `static/index.html` at `/`.

4. **Frontend (`static/index.html`)**

   * Simple UI with:

     * Start game button.
     * Input field to submit guesses.
     * Feedback display with color coding (green=correct, yellow=present, gray=absent).
   * Communicates with REST API via `fetch`.

5. **Tests (`tests/test_game.py`)**

   * Use pytest.
   * Test `WordleGame` logic (correct/incorrect guesses).
   * Optional: add integration tests for API endpoints.

6. **DevOps**

   * `requirements.txt` includes: `flask`, `flask_sqlalchemy`, `pytest`.
   * `Dockerfile` to containerize the app.
   * `docker-compose.yml` to run app + DB.
   * GitHub Actions CI (`.github/workflows/ci.yml`) to install dependencies and run pytest.

---

### 🧑‍💻 Coding Guidelines

* Use **PEP8** style.
* Add **docstrings** to all classes and functions.
* Organize imports properly.
* Use **clear commit messages** (e.g., “feat: add WordleGame logic”).
* Ensure code is modular (separate logic, models, routes).

---

### ✅ Deliverables

* Full source code in the structure above.
* All functionality implemented and tested.
* Documentation inside code and a minimal README explaining how to run locally and in Docker.

---

👉 **Task**: Please generate all the necessary files and code to complete this application exactly as described, ensuring careful organization and documentation.




Implement this project by following these steps 

1. audit the current version of the codebase

2. identify anything that may be incorrect / throws errors

3. come up with a plan to complete the project

4. implement the plan 

5. Run tests and ensure everything passes 


Then, write documentation on the project in the README.md file in the root directory. Ensure the documentaino is accurate and outlines the technical aspects of the codebase